
반복이라는 건 간단하게 말해 '같은 일을 되풀이함' 이라는 사전적 의미를 가지고 있습니다.
사람의 힘으로 반복적인 작업을 한다는 건 그다지 적합하지 않습니다.
반복하면 할수록 심리적으로 지치고, 지루해지며 그리고 치명적인 실수가 나올 수도 있습니다.
이러한 의미에서 반복적인 작업은 컴퓨터에게 적합하다고 말할 수 있습니다.

컴퓨터는 반복적인 작업에 있어 심리적인 압박을 느끼지 않고, 사람보다 훨씬 빠른 속도로 할 수 있습니다.
간단하게 예시를 들어보도록 하겠습니다.
출력을 해주는 printf를 떠올려 보도록 합니다. 
printf를 이용하여 "Hello, World!"를 10번 찍어야 한다고 해봅시다.
그건 번거롭긴 하지만 그다지 어려운 일은 아닐 겁니다.

하지만 10번이 아니라 100번 그 이상이 된다면 "이건 하고 싶지 않다"라는 생각을 하게 될 것입니다.
작업자체는 매우 단순하지만 반복하는 횟수를 생각하면 매우 곤란한 일이 되죠.

그래서 이 때 등장하는 것이 반복문이라는 존재입니다.
일정한 규칙이 있고, 반복성이 짙은 경우 반복문을 사용하기에 가장 적합한 예시입니다.

반복문은 반복적인 작업을 해주는 것 뿐만이 아니라 코드를 간략화시키는 역할을 하기도 합니다.

-----------------------------------------------------------------------------------------------------

for문은 몇 번 반복해야할지 즉 정해진 횟수가 있을 때 많이 사용되는 반복문입니다.
for문은 아래와 같은 3가지 요소로 구성이 되어있습니다.
-초기값(어떤 값부터 반복할 것인가?)
-조건식(어떤 조건에 한해 반복할 것인가?)
-변화 조건(어떻게 변화시킬 것인가?)

-----------------------------------------------------------------------------------------------------

for문을 사용하기 위해서는 반복할 코드를 반드시 중괄호( { } )로 열고 닫아줘야 하고,
초기값과 조건식, 변화 조건이 정해져 있어야만 합니다.
(조건식이나 변화 조건이 존재하지 않는다면 무한 반복이 될 수 있습니다)
조건식은 앞서 배운 관계연산자( <, >, !=, == 등)를 모두 사용할 수 있습니다.
단, 위와 같이 반복문 안에서 동작할 코드가 한 줄 밖에 없을 경우는 중괄호를 생략할 수도 있습니다.
중괄호를 생략할 경우에는 for문 바로 아래에 있는 코드만 실행하게 됩니다.

그리고 한가지 참고로 알려드리자면, 원래 초기의 C언어에서는 for문의 초기값내에서 변수를 선언하는 것이 불가능 했습니다.
무조건 for문 전에 초기변수를 선언해주어야 했지요.

하지만 C99 표준안부터는 초기값내에서 선언하는 것이 가능하므로 현재는 for문 밖에서 i를 사용할 일이 없다면,
두번째 코드처럼 for에서 바로 선언하셔도 됩니다!

단, 저렇게 for문 초기값 내에서 변수를 선언해주면 반복문을 벗어나서는 i를 사용할 수 없습니다.
반복문 바깥에서도 i를 사용하고 싶다면 첫번째 for문 먼저 i를 선언해주어야 합니다.

참고로 말씀드리자면 반복문을 돌릴 때 쓰는 변수 이름은 무엇을 쓰든 상관없지만 일반적으로 i, j, k를 많이 씁니다.
이중반복문이 아닌 일반적인 반복문은 i, 이중 반복문에서는 i, j, 삼중 포문에서는 i, j, k 순으로 말이지요.

조건식에 대해 다시 한 번 짚어 설명하자면, 실제로 동작하는 건 조건식이 거짓(false)인 경우에 반복문을 종료하고,
참(0이 아닌 값)인 경우 반복을 계속 진행한다는 것을 잘 기억해두시길 바랍니다.
즉, 적어준 조건을 만족하고 있을 때에 반복문을 계속 진행 한다는 것입니다.

-----------------------------------------------------------------------------------------------------

5강에서 반복문을 배우기 전까지는 들여쓰기를 쓸 일이 없었습니다.
물론 int main() 안의 코드들이 기본적으로 한번 들여쓰기가 되어 있는 것을 제외하고요.
하지만 이번 예제를 보면 for문 안의 printf가 들여쓰기가 되어있는 것을 볼 수 있습니다.

앞으로 프로그래밍을 계속하게되면 이 들여쓰기가 필수 아닌 필수가 되는데, 그 이유는 가독성을 위해서입니다.

지금은 몇줄 되지 않는 코드이므로 for문 안에 들어있는게 어디서부터 어디까지인지 금방 알 수 있습니다.
하지만 코드가 길어지고 반복문이나 조건문을 사용하게 되면 점점 더 쉽게 눈에 들어오지 않습니다.

따라서 for문 안에 들어있는 코드가 무엇인지, 조건문 안에 들어있는 코드가 무엇인지 쉽게 알기 위해 들여쓰기를 사용합니다.
기본적으로 대부분의 IDE에서는 자동적으로 for문이나 if문을 사용하면 들여쓰기를 해주기 때문에 크게 신경쓸 일은 없습니다만,
알고 넘어가도록 합시다.

-----------------------------------------------------------------------------------------------------

while문은 for문과 같이 반복문의 한 종류입니다.
for문이 일정한 횟수만큼 반복할 때 주로 사용되는 반복문이라면
while은 특정 조건까지 계속해서 반복할때 주로 사용됩니다.

for문과 while문을 비교해본 결과 알 수 있는 사실은 for문과는 다르게 초기값을 바깥에서 설정해주었다는것과
while문은 형식상 조건식만 이용한다는 것, 그리고 변화조건이 while문 내부에 있다는 점입니다.

-----------------------------------------------------------------------------------------------------

do~while문은 while문과 비슷하지만 한 가지 차이점이 있는 반복문입니다.
do(먼저 한 번 코드를 실행)한 후 while(조건 확인 및 반복)을 합니다.

while문의경우에는 조건식을 검사하여 반복을 실행하지만,
do~while문의 경우에는 do 안에 있는 코드를 적어도 한 번 실행 그 후에 조건식을 검사하여 반복을 실행하게 됩니다.

do~while문의 형식은 다음과 같습니다.
do {
	반복할 코드(적어도 한 번 실행)
} while(조건식);

실제로 do~while이 활용되는 경우는 거의 없으므로, "이런 것이 있구나"하고 넘어가시면 좋습니다.

-----------------------------------------------------------------------------------------------------


