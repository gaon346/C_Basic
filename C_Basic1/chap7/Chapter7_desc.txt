컴퓨터는 0과 1, 이진수를 이용하여 작업을 처리합니다.
따라서 숫자만을 처리할 수 있는 컴퓨터는 한글이나 영어 같은 문자를 처리할 수 없습니다.
하지만 익히 알고 있는 앱이나 게임같은 프로그램에는 문자가 쓰입니다.
그럼 컴퓨터는 어떻게 문자를 표현하는 걸까요?

바로 숫자를 글자에 대응시키는 방식으로 문자를 사용하고 있습니다.
예를 들면 알파벳 'a'는 97이라는 숫자와 대응됩니다.
이런 식으로 문자 하나 하나를 숫자에 매칭시키고 표현하는 방식입니다.
이를 아스키 코드라고 합니다.

-아스키 코드 검색해보기

여기서 한가지 의문이 생깁니다.
"숫자와 문자를 매칭시키기 때문에 256개의 글자 밖에 못쓰는 것을 아닌가?"라는 생각이지요.

256이라는 제한된 숫자 때문에 유니코드(UNICODE)라는 것이 생겼습니다.
유니코드는 문자를 1바이트가 아닌 2바이트로 처리하여 256배인 655,36개의 글자를 표현할 수 있습니다.
이건 현재까지의 여러 언어와 특수 문자를 표시하고도 2만개 가량 가짓수가 남을 정도입니다.

유니코드를 다루는 건 꽤 복잡한 부분이 있어 한글과 같이 2바이트를 사용하는 유니코드 문자에 대해선 배우지 않겠습니다.

char ch = 'ab';
char자료형은 1바이트로 한 글자만 담을 수 있습니다. 
그러므로 ab중 마지막으로 입력했던 b만이 ch변수에 담기게 됩니다.

배열의 크기가 더 큰 이유는 컴퓨터의 동작 방식에 있습니다.
배열을 출력하라고 했을 때 사용자가 원하는 것은 그 값 전체의 출력을 의미하는 것이겠지만,
실제로 컴퓨터가 인식할 때는 얼마만큼의 길이인지를 알려주어야 합니다.
하지만 출력할 때마다 이 배열은 4글자야, 5글자야 이렇게 알려주는 건 번거롭기 짝이 없는 일이죠.

그래서 마지막 남는 자리에 0, NULL, \0등의 값을 넣어줍니다.
이 세 문자는 전부 같은 것으로 종료문자를 가르킵니다.
아스키 코드표의 0부분을 보면 좀 더 이해가 쉬우실 겁니다.

이 종료 문자를 통해서 어디까지 출력할 것인지를 컴퓨터에게 알려주며, 정상적으로 출력되게 됩니다.

문자열에 값을 대입하고 싶다면 지금까지 썻던 코드와 같이 선언할 때 바로 값을 넣어주어야 합니다.
선언 이후에 값을 대입하려 하면 오류가 나는데, 만약 꼭 선언을 한 이후에 코드에서 값을 대입하고 싶다면 인덱스로 접근해서 하나하나 저장해야 합니다.

입력할때 문자열 배열의 경우에는 &를 쓰지 않고 그냥 변수 이름만 써주어도 됩니다.
배열의 경우, 배열의 이름에 주소를 담고 있기 때문입니다.
