배열(Array): 간단하게 말해서 일종의 집합을 의미한다.
지금까지 배운 것으로는 변수 하나에는 하나의 값 밖에 담지 못했지만,
배열을 이용하면 하나의 변수에 여러 개의 값을 넣을 수 있게 된다.

변수 이름 뒤에 대괄호를 이용해서 배열을 초기화 시킬 수 있다.
대괄호 안에 넣는 숫자는 배열의 크기를 의미한다.
배열 또한 마찬가지로 일반적인 변수를 선언했을 때처럼 자료형의 값들만 가질수 있다.

배열은 대괄호 안에 자릿값을 넣어 접근할 수 있다.
인덱스라고 흔히 부르는 자릿값은 언어에 따라서 0 혹은 1부터 시작하는데,
C의 경우에는 0부터 시작한다.

배열을 초기화 하는 방식
1. 배열을 선언과 동시에 초기화 하는 방법
	ex) int arr1[2] = { 1, 33 };
2. 특정 자릿수까지만 초기화 하는 방법
	ex) int arr2[5] = { 5 }; //0번째 값을 5로 초기화하고 나머지는 모두 0으로 초기화
3. 모든 값을 0으로 초기화하는 방법
	ex) int arr3[4] = { };
4. 초기화 값들의 갯수에 맞게 자동으로 배열의 크기를 정해주는 방법
	ex) int arr4[] = { 11, 22, 33, 44 }; //배열의 크기는 4로 자동으로 초기화
5. 초기화하지 않음
	ex) int arr5[5]; //초기화하지 않음.

배열의 갯수를 넘어서는 범위를 출력하거나 초기화하지 않은 배열을 출력했을 경우,
컴퓨터마다 결과가 조금씩 다르지만 대부분 쓰레기값이 나오게 된다.

변수를 선언함과 동시에 변수는 시스템 메모리 상에서 한 부분을 차지하게 되는데,
변수의 값을 정해주었다면 해당 메모리 영역의 값은 변수의 값이 되지만,
정해주지 않았을 경우에는 메모리 자체에서 가지고 있는 값을 보여주게 된다.
이 값이 바로 쓰레기 값이다.

배열에는 여러 개의 값을 담을 수 있어서 반복문과 매우 궁합이 좋다.

-----------------------------------------------------------------------------------------------------

<배열이 저장되는 메모리 주소>
일반적으로 우리가 사용하는 변수들은 모두 메모리의 특정한 주소에 저장되어 있다.
앞선 강의에서도 잠깐 언급하고 자나간 적이 있는데, &이 주소값을 나타낸다고 했었다. (scanf를 사용할때 주소값을 알려주기 위해 &를 사용한다고 했었다.)

각 변수들은 선언될 때 메모리에 무작위로 저장된다. 그리고 각각 그 주소값을 갖고 있다.

하지만 배열의 경우는 좀 다르다.
배열의 경우는 선언한 크기만큼 연속적으로 연결되어 있다.
int array[3];
위와 같은 코드의 경우, array배열은 int형이다.
따라서 배열 한 원소당 4바이트의 크기를 가지고 있는데, 배열은 메모리 주소가 연결되어 있다고 했다.
그렇다면 주소는 4씩 증가하겠죠?
array배열의 0번째 원소가 주소 1000번지에 저장되어 있다고 가정해보자.
그렇다면 1000~1003번지까지는 arr[0],1004~1007번지까지는 arr[1],
1009~1011번지까지는 arr[2]가 저장되는 것이다.

저장되는 위치는 4바이트씩이지만, C언어에서는 주소를 나타낼때 시작번지만을 나타낸다.
시작번지와 자료형만 알면 끝이 어디인지는 금방 계산할 수 있기 때문이다.
따라서 그림도 원소의 시작 주소만 적어보았다.
위 배열은 int형이기 때문에 4씩 증가했지만 1바이트인 char배열의 경우는 1씩,
8바이트인 double의 경우는 8씩 주소가 증가한다.
즉 연속된 각 원소끼리의 주소는 자료형의 크기만큼 차이난다는 것이다.

이번 강의에서는 배열은 일반 변수와는 다르게 메모리 주소가 연결되어 있구나 정도로만 알아두자.

-----------------------------------------------------------------------------------------------------

배열의 크기는 변수를 선언할 때부터 알고 있지만 이는 인간의 머리 속으로 알고 있는 것이고,
프로그램 상으로 배열의 크기를 알 수 있도록 해야한다.
미리 배열의 크기를 알고 있다면 상관없겠지만, 배열의 크기를 정확히 모를 경우 유용하게 쓸수 있다.

sizeof(arr) / sizeof(arr[0])
과 같은 방법으로 배열의 크기를 쉽게 구할 수 있다.
sizeof는 메모리 상에서 차지하고 있는 용량에 대해서 알려준다.
이 sizeof를 이용하여 전체 배열을 배열 중 하나의 요소로 나누면 쉽게 배열의 크기를 알 수 있다.



