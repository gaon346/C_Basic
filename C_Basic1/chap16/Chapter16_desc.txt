구조체란, 하나 이상의 변수를 묶어서 좀 더 편리하게 사용할 수 있도록 도와주는 도구입니다.
구조체는 새로운 자료형을 만드는 것과 같다고 할 수 있기 때문에, 위와 같이 보통 main함수 전에 선언합니다.
어떤함수 안에 선언하면 그 함수 안에서만 사용할 수 있기 때문인데, 만약 main함수 안에서 선언한다면 main함수 안에서만 사용할 수 있습니다.

구조체의 형태는 struct 구조체 이름 { 구조체 멤버들 };
위와 같은데, 중괄호 뒤에 ;를 붙여주어야 하므로 주의하시기 바랍니다.
사용할 변수들은 안에 묶어서 적어주는데, 이 변수들을 구조체 멤버라고 합니다.

선언한 것만으로는 고조체를 바로 사용할 수 없고, main함수 안에서 따로 선언을 해주어야 합니다.
struct로 선언했던 구조체의 이름과 앞으로 사용할 변수 이름을 써주면 되는데, struct { 구조체 이름 }까지가 intt와 같은 자료형이라고 생각하면 됩니다.
따라서 위 코드에서는 struct student codigm으로 선언하였습니다. 이렇게 되면 codigm의 자료형은 student구조체가 되는 것이지요.

선언한 후에는 구조체 멤버를 사용합니다.
사용할때에는 변수이름.구조체 멤버의 이름과 같은 형태로 작성하면 됩니다.
이렇게 구조체를 이용하면 묶어진 구조체 단위로 처리할 수 있기 때문에 가독성도 높아지고 관리하기 편리합니다.

구조체 멤버의 값을 main에서 선언을 할 때 대입해서 초기화 할 수 있습니다.
초기화 할 때에는 멤버 연산자.와 중괄호를 사용합니다.
구조체는 배열처럼 멤버전체를 초기화 할 수도있고, 원하는 변수만을 초기화 할수도 있습니다.

초기화 할때에는 {.멤버이름=값}과 같은 형태로 초기화 할수도 있으며, 멤버이름을 적지 않고 초기화 할 수도 있습니다.
멤버이름을 적지 않을 때는 구조체를 정의했던 순서대로 값이 들어갑니다. 또한 값을 따로 넣어주지 않은 멤버는 0으로 초기화 됩니다.




구조체를 선언을 할때 좀 더 편리한 방법이 있습니다.
typedef 키워드를 사용하는 것입니다.
typedef를 사용할 때는 구조체 이름을 생략할 수 있는데, 먼저 구조체 이름을 생략하지 않고 사용하는 방법에 대해 알아보겠습니다.

typedef키워든 c언어에서 자료형을 새롭게 이름을 붙일 때 쓰는 키워드입니다.
typedef를 이용하면 main함수에서 구조체를 선언할 때 매번 struct를 써줄 필요가 없습니다.
이 typedef를 사용할 때에는 구조체 별칭이 필요한데, 구조체 별칭은 구조체를 정의할 때 중괄호 뒤에 써주면 됩니다.

예시

#include <stdio.h>

typedef struct _Student {
	int age;
	char phone_number[14];
} Student;

int main(){
	Student member1;
	
	printf("나이 : ");
	scanf("%d", &member1.age);
	printf("번호 : ");
	scanf("%s", member1.phone_number);
	
	printf("----\n나이 : %d\n번호 : %s\n----", member1.age, member1.phone_number);
	
	return 0;
}


위와 같이 typedef와 별칭을 써주면 main함수에서 struct{구조체이름}을 써줄 필요 없이 별칭만 써도 구조체 선언이 가능합니다.
구조체 별칭은 구조체 이름과 동일하게 써주어도 무관하지만, 일반적으로 구조체 이름과 별칭을 둘 다 쓸 때는 구조체 이름 앞에 _를 붙여줍니다.

typedef를 쓰면 구조체 이름을 쓰지 않고 별칭만 사용하는 것도 가능합니다.

typedef struct {
	int age;
	char phone_number[14];
} Student;

이런식으로..
이렇게 구조체 이름을 따로 지정하지 않고 별칭만 사용하는 것을 익명 구조체라고 합니다.


일반 변수에 배열이 있듯이 구조체에도 배열이 있습니다.
학생 정보를 저장하는 구조체를 만들어서 수십 수백명의 정보를 저장해야 한다고 하면, 일반 변수처럼 구조체도 일일히 선언하는 것보다 배열을 쓰는 것이 훨씬 편리할 것입니다.
구조체 배열을 선언하는 방법은 일반적인 배열을 선언하는 방법과 같은데, 선언 및 초기화 하는 방법을 보도록 하겠습니다.

#include <stdio.h>

typedef struct {
	char name[30];
	int age;
} Student;

int main(){
	Student member1[3] = { {.name = "해리 포터"}, {.name = "헤르미온느 그레인저"}, {.name = "론 위즐리"} };
	
	member1[0].age = 10;
	member1[1].age = 10;
	member1[2].age = 10;
	
	return 0;
}

포인터가 어떤 변수의 주소를 담아서 가리키는 변수라는 것은 기억하고 계시지요? 구조체 포인터도 마찬가지입니다.
구조체를 가리키는 포인터를 구조체 포인터라고 합니다. 하지만 구조체 포인터에서는 기억해야 할 점이 있습니다.
int형 포인터는 int *ptr; 형식으로 선언했었지요. 구조체는 struct [구조체 이름]이 자료형이나 마찬가지입니다.
따라서 struct student *ptr; 과 같이 선언해야합니다.
이렇게 되면 앞에 struct가 있으니 ptr이 구조체라고 착각하시는 분들이 많은데, 이 ptr은 구조체를 가리키는 포인터일뿐 절대 구조체가 아니라는 점 기억해주세요!

#include <stdio.h>

typedef struct {
	int s_id;
	int age;
} Student;

int main(){
	Student member1;
	Student *ptr;
	
	ptr = &member1;
	
	(*ptr).s_id = 1004;
	(*ptr).age = 20;
	
	printf("member1의 학번 : %d, 나이: %d\n", member1.s_id, member1.age);
}

위와 같이 구조체 포인터를 이용해서 값을 대입하고, 그 값을 이용할 수 있습니다.
여기서 주의해야 할 점은 포인터를 사용할 때 *ptr.age처럼 바로 사용하는 것이 아니라 (*ptr).age 와 같이 괄호를 이용해야 한다는 것입니다. 
포인터 챕터에서 *ptr++와 (*ptr)++의 차이점을 공부하신 분들은 짐작하시겠지만, 저 온점도 연산자의 일종입니다.
따라서 *ptr.age를 이용하면 구조체가 아닌 포인터 변수를 구조체처럼 참조하려고 하기 때문에 오류가 발생합니다. 따라서 구조체 포인터를 사용하기 위해서는 항상 괄호를 사용해야 합니다.
그렇지만 매번 구조체 포인터를 사용할 때마다 괄호를 써주려면 매우 귀찮을 것 같지 않나요? C언어를 만든 프로그래머들도 똑같은 생각을 했습니다.
그래서 -> 라는 기호를 만들었습니다.
이 기호를 이용하면 괄호를 사용하지 않아도 알아서 주소로 찾아가서 구조체를 참조합니다. 괄호를 쓰지 않아도 되니 편리할 뿐만 아니라, 가독성도 더 좋습니다.

#include <stdio.h>

typedef struct {
    int s_id;
    int age;
} Student;

int main(){
    Student member1;
    Student *ptr;
    
    ptr = &member1;
    
    (*ptr).s_id = 1004;
    ptr->age = 20;
    
    printf("member1의 학번 : %d, 나이: %d\n", member1.s_id, member1.age);
}

구조체에서는 구조체 안에 구조체를 선언할 수 있다.

#include <stdio.h>

typedef struct {
	char name[15];
	int age;
} Teacher;

typedef struct {
	char name[15];
	int age;
	Teacher teacher; 
} Student;

int main(){
	Student Student;
	Teacher Teacher;
	
	Student.teacher.age = 30;
	Teacher.age = 40;
	
	return 0;
}

이런 식으로 다른 구조체를 멤버로 포함할 수 있습니다. 이럴 경우, Student안의 Teacher 구조체를 이용하고 싶으면 Student.teacher.age 와 같이 연속으로 멤버를 참조해야 사용할 수 있습니다.
물론 Teacher 구조체만 따로 선언해서 사용할 수도 있습니다. 
그리고 구조체에는 한가지 더 복잡한 개념이 있습니다. 자기 참조 구조체입니다.



구조체는 자기 자신을 참조하도록 자기와 똑같은 타입의 구조체를 멤버로 가질 수 있는데, 중첩 구조체보다 좀 더 복잡하게 느껴질 수 있습니다.

typedef struct {
	char name[15];
	int age;
	struct Student *ptr; 
} Student;

아직 구조체 선언이 끝나지도 않았는데, 어떻게 구조체 안에 또 구조체를 선언할 수 있지? 하고 의문이신 분들도 계실 겁니다.
하지만 구조체에서는 위와 같이 자기 자신을 가리키는 포인터를 멤버로 가질 수 있습니다.
조금 복잡하긴 하지만, 그냥 int형 구조체 안에 또다른 int형 포인터를 생성해주었다고 생각하면 좀 더 이해하기 편하실 겁니다.
그런데 중첩 구조체처럼 어떠한 정보를 저장하는 것도 아니고, 자기 자신을 가리켜서 어디에 쓰는 걸까요?
바로 연결리스트나 트리를 만들 때 사용됩니다.



구조체를 인자로 전달할 때에는 두가지 방법이 있습니다. 포인터로 전달하는 것과, 구조체 그대로 전달하는 것이지요.
구조체는 여러가지 자료형을 묶어서 새로운 자료형을 만든 것이기 때문에, 구조체 크기가 커질 수록 복사할 공간이 더 필요하게 됩니다.
따라서 공간이 낭비되어 비효율적이기 때문에, 매개변수로 구조체를 전달할 때에는 보통 포인터를 사용합니다.
값을 바꿀 필요가 없는 경우에도요.

#include <stdio.h>

typedef struct {
	int s_id;
	int age;
} Student;

void print_student(Student s){
	s.s_id = 2000;
	s.age = 25;
	
	printf("학번 : %d, 나이 : %d\n", s.s_id, s.age);
}

int main(){
	Student s;

	s.s_id = 1000;
	s.age = 20;
	
	print_student(s);
    
	printf("학번 : %d, 나이: %d\n", s.s_id, s.age);
}

예상대로 print_student함수 내에서는 바뀐 값으로 출력되었지만, main함수에서의 값은 바뀌지 않았기 때문에 두번째 출력에서는 원래의 값이 출력 되었습니다.
이제 포인터로 함수에 전달해 보겠습니다.

#include <stdio.h>

typedef struct {
	int s_id;
	int age;
} Student;

void print_student(Student *s){
	s->s_id = 2000;
	s->age = 25;
	
	printf("학번 : %d, 나이 : %d\n", s->s_id, s->age);
}

int main(){
	Student s;

	s.s_id = 1000;
	s.age = 20;
	
	print_student(&s);
    
	printf("학번 : %d, 나이: %d\n", s.s_id, s.age);
}



